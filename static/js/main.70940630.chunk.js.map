{"version":3,"sources":["MapChart.js","App.js","registerServiceWorker.js","index.js"],"names":["colorScale","scaleLinear","domain","range","memo","_ref","setTooltipContent","_useState","useState","_useState2","Object","slicedToArray","data","setData","useEffect","axios","get","then","response","console","log","Countries","react_default","a","createElement","Fragment","index_umd","style","width","padding","data-tip","projectionConfig","scale","stroke","strokeWidth","length","geography","_ref2","geographies","map","geo","d","find","s","CountryCode","properties","ISO_A2","key","rsmKey","onMouseEnter","_geo$properties","NAME","POP_EST","concat","x","toString","pattern","test","replace","numberWithCommas","onMouseLeave","fill","App","content","setContent","Card","className","CardBody","CardTitle","CardSubtitle","MapChart","index_es","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.70940630.chunk.js","sourcesContent":["import React, { useState, useEffect, memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Sphere,\r\n  Graticule\r\n} from \"react-simple-maps\";\r\n\r\nimport axios from 'axios';\r\n\r\nimport { scaleLinear } from \"d3-scale\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst colorScale = scaleLinear()\r\n  .domain([0, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000])\r\n  .range([\"#FFFDD0\", \"#7FFF00\", \"#FFFF00\", \"#F4C430\", \"#FFBF00\", \"#FF7F00\", \"#FF7F00\", \"#FF0000\", \"#FF2400\", \"#800000\", \"#65000B\", \"#660000\", \"#000000\"]);\r\n\r\nconst numberWithCommas = (x) => {\r\n  x = x.toString();\r\n  var pattern = /(-?\\d+)(\\d{3})/;\r\n  while (pattern.test(x))\r\n      x = x.replace(pattern, \"$1,$2\");\r\n  return x;\r\n}\r\n\r\nconst MapToolTip = ({ setTooltipContent }) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('https://api.covid19api.com/summary').then((response) => {\r\n      console.log(response);\r\n      setData(response.data.Countries)\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ComposableMap style={{width:\"100%\", padding:\"0\"}} data-tip=\"COVID-19 Total Cases\" projectionConfig={{ scale: 130 }}>\r\n        <Sphere stroke=\"#9EB9D4\" strokeWidth={1} />\r\n        <Graticule stroke=\"#9EB9D4\" strokeWidth={1} />\r\n        {data.length > 0 && (\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => {\r\n                const d = data.find((s) => s.CountryCode === geo.properties.ISO_A2);\r\n                return (\r\n                  <Geography\r\n                    key={geo.rsmKey}\r\n                    geography={geo}\r\n                    onMouseEnter={() => {\r\n                      const { NAME, POP_EST } = geo.properties;\r\n                      setTooltipContent(`${d ? d[\"Country\"] : NAME} â€”  ${d ? 'Total Cases: ' + numberWithCommas(d[\"TotalConfirmed\"]) : 'No Case Recorded'}`);\r\n                    }}\r\n                    onMouseLeave={() => {\r\n                      setTooltipContent(\"\");\r\n                    }}\r\n                    // style={{\r\n                    //   default: {\r\n                    //     fill: \"#555D50\",\r\n                    //     outline: \"none\"\r\n                    //   },\r\n                    //   hover: {\r\n                    //     fill: \"#58111A\",\r\n                    //     outline: \"none\"\r\n                    //   },\r\n                    //   pressed: {\r\n                    //     fill: \"#C80815\",\r\n                    //     outline: \"none\"\r\n                    //   }\r\n                    // }}\r\n                    fill={d ? colorScale(d[\"TotalConfirmed\"]) : \"#5D8AA8\"}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </Geographies>\r\n\r\n        )}\r\n      </ComposableMap>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default memo(MapToolTip);\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport \"./styles.css\";\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n} from 'reactstrap'\n\nimport MapChart from \"./MapChart\";\n\nimport ReactTooltip from \"react-tooltip\";\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  console.log(\"tooltip\", content);\n  return (\n    <div>\n      <Card className=\"m-2\">\n        <CardBody className=\"m-2\">\n          <CardTitle>\n            Covid WorldMetrics\n          </CardTitle>\n          <CardSubtitle>\n            World-Wide Total Cases\n          </CardSubtitle>\n          <MapChart setTooltipContent={setContent} />\n          <ReactTooltip>{content}</ReactTooltip>\n        </CardBody>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n/*\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  return (\n    <div>\n      <MapChart setTooltipContent={setContent} />\n      <ReactTooltip>{content}</ReactTooltip>\n    </div>\n  );\n}\n\n*/\n\n\n\n\n\n/*\n  class App extends Component {\n    render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Welcome to React</h1>\n          </header>\n          <p className=\"App-intro\">\n            To get started, edit <code>src/App.js</code> and save to reload.\n          </p>\n        </div>\n      );\n    }\n  }\n*/","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}